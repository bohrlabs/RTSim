cmake_minimum_required(VERSION 3.17)

project(Engine VERSION 1.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Source files
set(ENGINE_SRC
    src/Engine/Engine.cpp
    # src/Engine/Logger.cpp
    # src/Engine/Threading.cpp
    # src/Engine/Platform.cpp
    # src/Engine/Configuration.cpp
    # src/Engine/PluginManager.cpp
)

# Add the Engine library
add_library(Engine SHARED ${ENGINE_SRC})

# Include directories (Modern CMake)
target_include_directories(Engine
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>
)

# Set library version
set_target_properties(Engine PROPERTIES VERSION ${PROJECT_VERSION})

# Install the Engine library
install(TARGETS Engine
    EXPORT EngineTargets
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)

# Install the public headers
install(DIRECTORY include/ DESTINATION include)

# Export the package configuration
install(EXPORT EngineTargets
    FILE EngineTargets.cmake
    NAMESPACE Engine::
    DESTINATION lib/cmake/Engine
)

# Generate EngineConfig.cmake
include(CMakePackageConfigHelpers)

write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/EngineConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

configure_package_config_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/EngineConfig.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/EngineConfig.cmake
    INSTALL_DESTINATION lib/cmake/Engine
)

install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/EngineConfig.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/EngineConfigVersion.cmake
    DESTINATION lib/cmake/Engine
)
